(1) eerst elk vak 1 hoorcollege en 1 practica geven (40 studenten in een practica mag)
(1.1) schema datastructuur verbeteren ##classes
- mogelijk een dict in een dict
- mogelijk een json
- mogelijk een dataframe?
(1.2) courses van een student veranderen in object ipv strings met de naam vd course zodat course.tutorial_group makkelijker bereikt kan worden

(2) groepjes maken van studenten (22 studenten op een practica van max 10 kunnen bijv 3 groepen van ong 7 worden) ##assign, classes
(2.1) - groepen maken binnen course
      - een dict attribuut maken met key groepnummer, value aantal studenten in de groep
      - met die dict kan je dan studenten willekeurig een groepnummer geven, de value constant updaten tot de groep "vol" is
      - daarna studenten in een random groepje zetten
(2.2) alleen groepen indelen als studenten in die groep niet al 2 lessen hadden


(3) kosten functie maken ##assign, classes
- roster een attribute geven om maluspunten bij te houden

(4) random initialize doen in plaats van boven naar beneden
(4.1) dit doen door de room lijst random te shuffelen, en dan van boven naar beneden roosteren

(5) nieuw maken met subgroepjes en kosten

"""
We zijn hier
"""

(6) Begin maken aan mogelijkheid om studenten om te roosteren

## HEURISTIEK ## 
- random x10, neem beste, daar random aanpassingen (5 studenten met hoogste cost met willekeurige groep wisselen etc)
- capaciteit overschrijden limiteren naar max 5 bijv, of een percentage, of welke het hoogst is

## mogelijke verbeteringen ##
course naar dict veranderen
rooms structuur veranderen, nu is elke room object binnen class Room met attributes: - id (type int)
                                                                                     - cap (type int)
                                                                                     - availability (type dict)
Snakevis en profilers to check which functions take a long time 
                                                                                
                                                                                     
Rooster class __wrapper__ method
fill roster mogelijk naar assign
tussenuren berekenen door dict met int als key en value de tijd string

## Presentatie##
Show that multiple workgroups and tutorials are possible
als een student niet een verandering in zn rooster had bij een iteratie, niet zn score opnieuw berekenen
studenten een attribuut changed meegeven, zodat als ze later een ander rooster krijgen we kunnen checken of hun score wel of niet moet worden uitgerekend.
kan add classes weg bij student?
*args bij courses class?

## structuur ##
- class tutorial maken
- in de class roep je student id op
- met if statements condities erin zetten, zodat als we later een interactief algoritme willen je die statements aan en uit kan zetten
beter om een sterkere hillclimber te maken ongeacht de initiele stand

## !!PROBLEMEN!! ##
expliciet noemen type en naam in fill_schedule
studenten van vak 1 kunnen een lecture hebben en tegelijkertijd een tutorial van vak 2
!!45 enrolmments in bioinfo, maar csv zegt 40. Hebben het nu veranderd maar even vragen wat ze bedoelen met 'expected'!!

tijdsloten zijn strings, dus tussenuren bereken word lastig. Als je 9-11 en 13-15 hebt, heb je 1 tussenuur maar met strings kan je dit niet uitrekenen.
- in de data wellicht geen strings maar integers gebruiken, 1=9-11, 2=11-13 etc. Dan kan je de tussenuren uitrekenen door (3 - 1)= je uren - 1 omdat je niet twee maar 1 tussenuur hebt. 
- als we een schema printen oid kunnen we vrij makkelijk een replace gebruiken dat ie wel een string displayed maar dat de data integers blijven.

## Vragen TA##
mogen we ervan uitgaan dat er altijd maar 1 practica of wg is?
hoe veranderen we het makkelijkst studenten? wanneer lectures veranderen en wanneer practicals? deel van de randoms hieraan toeschrijven?
Moeten we rekening houden met volgorde van lessen(Lecture1, Tutorial1, Lecture2, Tutorial2, Tutorial3)


## Dingen die gedraaid kunnen worden ##
- studenten van 2 tut of pract groepen van het zelfde vak
- tijdslot van een tut of pract groep van 2 verschillende vakken
- tijdslot van een tut of pract groep binnen een vak (moeten er wel meerdere zijn)
- tijdslot van een lecture van 2 verschillende vakken
- tijdslot van een lecture binnen een vak (moeten er wel meerdere zijn) --> doet niks!!


# Zeg dit tegen wouter #
In vakken csv staat Zoeken sturen en bewegen al "Zoeken, sturen en bewegen. Maar bij studenten_en_vakken.csv staat het als: Zoeken sturen en bewegen. 
